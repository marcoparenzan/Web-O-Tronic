@{
    Layout = "~/Views/Shared/_LayoutEmpty.cshtml";
    bool imLeftPaddle = string.IsNullOrWhiteSpace(ViewBag.leftpaddle);
    bool imRightPaddle = !imLeftPaddle;
}
@section head {
    <link href="~/css/webotronic.css" rel="stylesheet" />
}
<div class="canvas">
    @if (imLeftPaddle)
    {
        <h1>
            Copy this
            <a href="#" id="playlink">link</a> and send it to a friend to start playing, or paste a link received from a friend to start playing.
            <br />
            Waiting to start playing...
        </h1>
    }
    else
    {
        <h1>
            Waiting to start playing...
        </h1>
    }
</div>
@section scripts {

    <script src="/assets/js/kontra.js"></script>
    <script src="/assets/js/webotronic.js"></script>
    <script type="text/javascript" src="~/js/signalr/browser/signalr.js"></script>
    <script>

        var connection = new signalR.HubConnectionBuilder()
            .withUrl('/remoteplay')
            .build();

        var imLeftPaddle = @imLeftPaddle.ToString().ToLower();
        var imRightPaddle = @imRightPaddle.ToString().ToLower();

        var profile = {};
        var players = {};

        connection.start()
            .then(function (xxx) {
                if (imRightPaddle) {
                    connection.invoke("PlayWith", '@ViewBag.leftpaddle').catch(function (error) {
                        console.error(error.message);
                    });
                }
            })
            .catch(function (error) {
                console.error(error.message);
            });

        connection.on('profile', function (args) {
            profile = args;
            if (imLeftPaddle) {
                document.getElementById("playlink").href = '@Url.Action("Game", new { leftpaddle = "__leftpaddle__" })'.replace("__leftpaddle__", profile.userId);
            }
        });

        connection.on('begin', function (args) {
            players = args;
            startGame();
        });

        function startGame() {

            document.getElementsByClassName("canvas")[0].innerHTML = "<canvas id='canv'></canvas>";

            kontra.init();

            kontra.canvas.width = window.innerWidth - 50;
            kontra.canvas.height = window.innerHeight - 50;

            kontra.assets.load("/assets/sprites/leftpaddle.png", "/assets/sprites/rightpaddle.png", "/assets/sprites/ball.png").then(function () {

                world = new World({
                    scoreText: () => (leftpaddle.score + "  " + rightpaddle.score)
                });

                var el = document.getElementById("canv");

                var handleMove = function (t) {
                    var x = t.clientX;
                    var y = t.clientY;
                    if (x < kontra.canvas.width / 2) {
                        leftpaddle.position.x = world.xfrompixel(x);
                        leftpaddle.position.y = world.yfrompixel(y);
                    }
                    else {
                        rightpaddle.position.x = world.xfrompixel(x);
                        rightpaddle.position.y = world.yfrompixel(y);
                    }
                };

                el.addEventListener("touchstart", function (e) {

                    e.preventDefault();

                    if (ball.state === "running") {
                        handleMove(e.targetTouches[0]);
                        if (e.targetTouches.length >= 2) handleMove(e.targetTouches[1]);
                    }
                    else if (ball.state === "stopped") {
                        ballrun();
                    }

                }, false);
                el.addEventListener("touchmove", function (e) {

                    e.preventDefault();

                    if (ball.state === "running") {
                        handleMove(e.targetTouches[0]);
                        if (e.targetTouches.length >= 2) handleMove(e.targetTouches[1]);
                    }

                }, false);

                let leftpaddle = new Paddle({
                    width: world.xfrompixel(world.rescalex(50)),
                    height: world.yfrompixel(world.rescaley(160)),
                    boundary: {
                        x1: world.x1,
                        y1: world.y1,
                        x2: (world.x2 + world.x1) / 2,
                        y2: world.y2,
                    },
                    restartposition: new XYVector(world.xfrompixel(20), world.xfrompixel(kontra.canvas.height / 2)),
                    imageName: "leftpaddle"
                });

                let rightpaddle = new Paddle({
                    width: world.xfrompixel(world.rescalex(50)),
                    height: world.yfrompixel(world.rescaley(160)),
                    boundary: {
                        x1: (world.x2 + world.x1) / 2,
                        y1: world.y1,
                        x2: world.x2,
                        y2: world.y2,
                    },
                    restartposition: new XYVector(world.xfrompixel(kontra.canvas.width - 20), world.yfrompixel(kontra.canvas.height / 2)),
                    imageName: "rightpaddle"
                });

                let ball = new Ball({
                    movement: world.rescalex(8),
                    boundary: {
                        x1: world.x1,
                        y1: world.y1,
                        x2: world.x2,
                        y2: world.y2,
                    },
                    imageName: "ball"
                });

                let updateBall = function () {

                    if (ball.sprite.collidesWith(leftpaddle.sprite) && (ball.speed.x < 0)) {
                        ball.bouncex(leftpaddle);
                    }
                    else if (ball.sprite.collidesWith(rightpaddle.sprite) && (ball.speed.x > 0)) {
                        ball.bouncex(rightpaddle);
                    }
                    else if (ball.position.x >= (ball.boundary.x2)) {
                        ball.score(leftpaddle, rightpaddle);
                        if (leftpaddle.score === 15) {
                            document.getElementsByClassName("canvas")[0].innerHTML = "<h1>left won</h1>";
                        }
                    }
                    else if (ball.position.x <= ball.boundary.x1) {
                        ball.score(rightpaddle, leftpaddle);
                        if (rightpaddle.score === 15) {
                            document.getElementsByClassName("canvas")[0].innerHTML = "<h1>right won</h1>";
                        }
                    }
                    else if (ball.position.y >= (ball.boundary.y2)) {
                        ball.bouncey();
                    }
                    else if (ball.position.y <= ball.boundary.y1) {
                        ball.bouncey();
                    }

                    //ball.position.add(ball.speed);
                };

                connection.on('leftpaddleupdate', function (args) {
                    leftpaddle.position = args.position;
                    leftpaddle.score = args.score;
                });
                connection.on('rightpaddleupdate', function (args) {
                    rightpaddle.position = args.position;
                    rightpaddle.score = args.score;
                });
                connection.on('ballupdate', function (args) {
                    ball.position = new XYVector(args.position.x, args.position.y);
                    ball.speed = new PolarVector(args.speed.mag, args.speed.angle);
                    ball.state = args.state;
                });

                let ballrun = function () {
                    ball.run();

                    if (imLeftPaddle) {

                        // cannot check left or right
                        updateBall();
                        connection.invoke("NotifyBall", players.rightpaddle, {
                            position: ball.position,
                            speed: ball.speed,
                            state: ball.state
                        });

                        connection.invoke("NotifyLeftPaddle", players.rightpaddle, {
                            position: leftpaddle.position,
                            score: leftpaddle.score
                        });
                    }
                    else if (imRightPaddle) {

                        updateBall();
                        connection.invoke("NotifyBall", players.leftpaddle, {
                            position: ball.position,
                            speed: ball.speed,
                            state: ball.state
                        });

                        connection.invoke("NotifyRightPaddle", players.leftpaddle, {
                            position: rightpaddle.position,
                            score: rightpaddle.score
                        });
                    }
                };

                let loop = kontra.gameLoop({  // create the main game loop
                    update: function () {        // update the game state
                        if (ball.state === "running") {

                            if (imLeftPaddle) {

                                if (ball.speed.x > 0) {
                                    updateBall();
                                    ball.position.add(ball.speed);
                                    connection.invoke("NotifyBall", players.rightpaddle, {
                                        position: ball.position,
                                        speed: ball.speed,
                                        state: ball.state
                                    });
                                }

                                if (kontra.keys.pressed('x')) {
                                    leftpaddle.left();
                                }
                                else if (kontra.keys.pressed('c')) {
                                    leftpaddle.right();
                                }

                                if (kontra.keys.pressed('a')) {
                                    leftpaddle.up();
                                }
                                else if (kontra.keys.pressed('z')) {
                                    leftpaddle.down();
                                }

                                connection.invoke("NotifyLeftPaddle", players.rightpaddle, {
                                    position: leftpaddle.position,
                                    score: leftpaddle.score
                                });
                            }
                            else if (imRightPaddle) {

                                if (ball.speed.x < 0) {
                                    updateBall();
                                    ball.position.add(ball.speed);
                                    connection.invoke("NotifyBall", players.leftpaddle, {
                                        position: ball.position,
                                        speed: ball.speed,
                                        state: ball.state
                                    });
                                }

                                if (kontra.keys.pressed('b')) {
                                    rightpaddle.left();
                                }
                                else if (kontra.keys.pressed('n')) {
                                    rightpaddle.right();
                                }

                                if (kontra.keys.pressed('k')) {
                                    rightpaddle.up();
                                }
                                else if (kontra.keys.pressed('m')) {
                                    rightpaddle.down();
                                }

                                connection.invoke("NotifyRightPaddle", players.leftpaddle, {
                                    position: rightpaddle.position,
                                    score: rightpaddle.score
                                });
                            }

                            world.update();
                            leftpaddle.update();
                            rightpaddle.update();
                            ball.update();
                        }
                        else if (ball.state === "stopped") {
                            if (kontra.keys.pressed('space')) {
                                ballrun();
                            }
                        }
                    },
                    render: function () {        // render the game state
                        world.render();
                        leftpaddle.render();
                        rightpaddle.render();
                        ball.render();
                    }
                });

                loop.start();    // start the game

            });

        }

    </script>
}
